// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// AgentStatusHandlerFunc turns a function with the right signature into a agent status handler
type AgentStatusHandlerFunc func(AgentStatusParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn AgentStatusHandlerFunc) Handle(params AgentStatusParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// AgentStatusHandler interface for that can handle valid agent status params
type AgentStatusHandler interface {
	Handle(AgentStatusParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewAgentStatus creates a new http.Handler for the agent status operation
func NewAgentStatus(ctx *middleware.Context, handler AgentStatusHandler) *AgentStatus {
	return &AgentStatus{Context: ctx, Handler: handler}
}

/*
	AgentStatus swagger:route POST /agent/status agent agentStatus

AgentStatus agent status API
*/
type AgentStatus struct {
	Context *middleware.Context
	Handler AgentStatusHandler
}

func (o *AgentStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAgentStatusParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// AgentStatusBody agent status body
//
// swagger:model AgentStatusBody
type AgentStatusBody struct {

	// env z Id
	EnvZID string `json:"envZId,omitempty"`
}

// Validate validates this agent status body
func (o *AgentStatusBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this agent status body based on context it is used
func (o *AgentStatusBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AgentStatusBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentStatusBody) UnmarshalBinary(b []byte) error {
	var res AgentStatusBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// AgentStatusOKBody agent status o k body
//
// swagger:model AgentStatusOKBody
type AgentStatusOKBody struct {

	// shares
	Shares []*rest_model_zrok.Share `json:"shares"`
}

// Validate validates this agent status o k body
func (o *AgentStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateShares(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AgentStatusOKBody) validateShares(formats strfmt.Registry) error {
	if swag.IsZero(o.Shares) { // not required
		return nil
	}

	for i := 0; i < len(o.Shares); i++ {
		if swag.IsZero(o.Shares[i]) { // not required
			continue
		}

		if o.Shares[i] != nil {
			if err := o.Shares[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this agent status o k body based on the context it is used
func (o *AgentStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateShares(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AgentStatusOKBody) contextValidateShares(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Shares); i++ {

		if o.Shares[i] != nil {

			if swag.IsZero(o.Shares[i]) { // not required
				return nil
			}

			if err := o.Shares[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentStatusOK" + "." + "shares" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AgentStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AgentStatusOKBody) UnmarshalBinary(b []byte) error {
	var res AgentStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
