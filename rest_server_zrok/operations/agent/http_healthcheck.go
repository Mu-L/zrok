// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openziti/zrok/rest_model_zrok"
)

// HTTPHealthcheckHandlerFunc turns a function with the right signature into a http healthcheck handler
type HTTPHealthcheckHandlerFunc func(HTTPHealthcheckParams, *rest_model_zrok.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn HTTPHealthcheckHandlerFunc) Handle(params HTTPHealthcheckParams, principal *rest_model_zrok.Principal) middleware.Responder {
	return fn(params, principal)
}

// HTTPHealthcheckHandler interface for that can handle valid http healthcheck params
type HTTPHealthcheckHandler interface {
	Handle(HTTPHealthcheckParams, *rest_model_zrok.Principal) middleware.Responder
}

// NewHTTPHealthcheck creates a new http.Handler for the http healthcheck operation
func NewHTTPHealthcheck(ctx *middleware.Context, handler HTTPHealthcheckHandler) *HTTPHealthcheck {
	return &HTTPHealthcheck{Context: ctx, Handler: handler}
}

/*
	HTTPHealthcheck swagger:route POST /agent/share/http-healthcheck agent httpHealthcheck

HTTPHealthcheck http healthcheck API
*/
type HTTPHealthcheck struct {
	Context *middleware.Context
	Handler HTTPHealthcheckHandler
}

func (o *HTTPHealthcheck) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewHTTPHealthcheckParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *rest_model_zrok.Principal
	if uprinc != nil {
		principal = uprinc.(*rest_model_zrok.Principal) // this is really a rest_model_zrok.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// HTTPHealthcheckBody HTTP healthcheck body
//
// swagger:model HTTPHealthcheckBody
type HTTPHealthcheckBody struct {

	// endpoint
	Endpoint string `json:"endpoint,omitempty"`

	// env z Id
	EnvZID string `json:"envZId,omitempty"`

	// expected Http response
	ExpectedHTTPResponse float64 `json:"expectedHttpResponse,omitempty"`

	// http verb
	HTTPVerb string `json:"httpVerb,omitempty"`

	// share token
	ShareToken string `json:"shareToken,omitempty"`

	// timeout ms
	TimeoutMs float64 `json:"timeoutMs,omitempty"`
}

// Validate validates this HTTP healthcheck body
func (o *HTTPHealthcheckBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP healthcheck body based on context it is used
func (o *HTTPHealthcheckBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *HTTPHealthcheckBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HTTPHealthcheckBody) UnmarshalBinary(b []byte) error {
	var res HTTPHealthcheckBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// HTTPHealthcheckOKBody HTTP healthcheck o k body
//
// swagger:model HTTPHealthcheckOKBody
type HTTPHealthcheckOKBody struct {

	// error
	Error string `json:"error,omitempty"`

	// healthy
	Healthy bool `json:"healthy,omitempty"`
}

// Validate validates this HTTP healthcheck o k body
func (o *HTTPHealthcheckOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP healthcheck o k body based on context it is used
func (o *HTTPHealthcheckOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *HTTPHealthcheckOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *HTTPHealthcheckOKBody) UnmarshalBinary(b []byte) error {
	var res HTTPHealthcheckOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
