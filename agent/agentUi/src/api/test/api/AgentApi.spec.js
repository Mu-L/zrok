/*
 * agent/agentGrpc/agent.proto
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: version not set
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.51
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AgentagentGrpcagentproto);
  }
}(this, function(expect, AgentagentGrpcagentproto) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AgentagentGrpcagentproto.AgentApi();
  });

  describe('(package)', function() {
    describe('AgentApi', function() {
      describe('agentAccessPrivate', function() {
        it('should call agentAccessPrivate successfully', function(done) {
          // TODO: uncomment, update parameter values for agentAccessPrivate call and complete the assertions
          /*
          var opts = {};

          instance.agentAccessPrivate(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.AccessPrivateResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentReleaseAccess', function() {
        it('should call agentReleaseAccess successfully', function(done) {
          // TODO: uncomment, update parameter values for agentReleaseAccess call and complete the assertions
          /*
          var opts = {};

          instance.agentReleaseAccess(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.ReleaseAccessResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentReleaseShare', function() {
        it('should call agentReleaseShare successfully', function(done) {
          // TODO: uncomment, update parameter values for agentReleaseShare call and complete the assertions
          /*
          var opts = {};

          instance.agentReleaseShare(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.ReleaseShareResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentSharePrivate', function() {
        it('should call agentSharePrivate successfully', function(done) {
          // TODO: uncomment, update parameter values for agentSharePrivate call and complete the assertions
          /*
          var opts = {};

          instance.agentSharePrivate(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.SharePrivateResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentSharePublic', function() {
        it('should call agentSharePublic successfully', function(done) {
          // TODO: uncomment, update parameter values for agentSharePublic call and complete the assertions
          /*
          var opts = {};

          instance.agentSharePublic(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.SharePublicResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentStatus', function() {
        it('should call agentStatus successfully', function(done) {
          // TODO: uncomment agentStatus call and complete the assertions
          /*

          instance.agentStatus(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.StatusResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentVersion', function() {
        it('should call agentVersion successfully', function(done) {
          // TODO: uncomment agentVersion call and complete the assertions
          /*

          instance.agentVersion(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AgentagentGrpcagentproto.VersionResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
